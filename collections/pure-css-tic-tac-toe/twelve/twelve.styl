*
  box-sizing border-box

:root
  --size 300px
  --piece-size calc(var(--size) / 3)
  --line hsl(0, 0%, 100%)
  --bg hsl(210, 50%, 25%)
  --naught hsl(200, 80%, 50%)
  --cross hsl(10, 80%, 50%)
  --draw-speed 0.15
  --color hsl(0, 10%, 10%)

  @media(min-width 768px)
    --size 50vmin

body
  min-height 100vh
  display grid
  place-items center
  margin 0
  overflow hidden
  background var(--bg)
  color var(--color)

svg
  stroke var(--stroke)

form
.board
  display grid
  place-items center
  position relative

.game__result
  display none
  position absolute
  width calc(var(--size) * 1.5)
  height calc(var(--size) * 1.5)
  transform translate(-50%, -50%)
  top 50%
  left 50%

label
.o
.x
  position absolute
  display inline-block
  height var(--piece-size)
  width var(--piece-size)

.o
  --stroke var(--naught)
  transform rotateX(180deg)

.x
  --stroke var(--cross)

  path:nth-of-type(2)
    --delay var(--draw-speed)

:checked + .x
  display block

:checked + .o
  display block

.board
  height var(--size)
  width var(--size)
  grid-template-columns repeat(3, 1fr)
  grid-template-rows repeat(3, 1fr)

  &__x
  &__o
    display none
    left calc(var(--x) * (100% / 3))
    top calc(var(--y) * (100% / 3))
    z-index 2
    position absolute

  &__line
    --stroke var(--line)
    width calc(var(--size) * 0.05)
    height var(--size)
    position absolute
    top 50%
    left 50%
    transform translate(-50%, -50%) rotate(calc(var(--rotate) * -90deg)) translate(calc(var(--shift) * ((var(--size) / 3) * 0.5)), 0)

  &__cell
    height var(--piece-size)
    width var(--piece-size)

input
button
  position absolute

button
  top 125%
  background transparent
  border 0
  padding 0
  height 5vmin
  width 5vmin
  min-height 48px
  min-width 48px
  outline transparent
  cursor pointer
  display none
  transition transform calc(var(--draw-speed) * 1s)
  animation fadeIn calc(var(--draw-speed) * 4s) calc(var(--draw-speed) * 2s) both

  &:hover
    transform translate(0, -4%)
  &:active
    transform translate(0, 2%) scale(0.8)

.reset
  height 100%
  fill var(--line)

input
  position fixed
  left 100%

.result
  animation flyIn calc(var(--draw-speed) * 2s) ease-in both
  backdrop-filter blur(25px)
  z-index 10

  &__content
    height 40%
    width 40%
    top 50%
    left 50%
    transform translate(-50%, -50%)
    position absolute
    border-radius 15%
    background var(--line)
    align-items center
    display flex
    justify-content center
    flex-direction column
    font-weight bold
    font-size 2rem
    font-family sans-serif
    box-shadow 0 3vmin 2.5vmin -2.5vmin hsl(0, 0%, 0%)

  &__winner
    position static
    height calc(var(--size) / 3)

.zzz
  fill hsl(0, 0%, 45%)

@keyframes fadeIn
  from
    opacity 0

@keyframes flyIn
  from
    opacity 0
    transform translate(-50%, 250%) scale(0)

// This part only cares about showing/hiding the right labels for each move
:checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
  // opacity 1
  display block

:checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(even)
:checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ .board .board__cell label:nth-of-type(odd)
  // opacity 0.25
  display none

// Winning combos
#x-0:checked ~ #x-1:checked ~ #x-2:checked ~ .game__result--x
#x-3:checked ~ #x-4:checked ~ #x-5:checked ~ .game__result--x
#x-6:checked ~ #x-7:checked ~ #x-8:checked ~ .game__result--x
#x-0:checked ~ #x-3:checked ~ #x-6:checked ~ .game__result--x
#x-1:checked ~ #x-4:checked ~ #x-7:checked ~ .game__result--x
#x-2:checked ~ #x-5:checked ~ #x-8:checked ~ .game__result--x
#x-0:checked ~ #x-4:checked ~ #x-8:checked ~ .game__result--x
#x-2:checked ~ #x-4:checked ~ #x-6:checked ~ .game__result--x
#o-0:checked ~ #o-1:checked ~ #o-2:checked ~ .game__result--o
#o-3:checked ~ #o-4:checked ~ #o-5:checked ~ .game__result--o
#o-6:checked ~ #o-7:checked ~ #o-8:checked ~ .game__result--o
#o-0:checked ~ #o-3:checked ~ #o-6:checked ~ .game__result--o
#o-1:checked ~ #o-4:checked ~ #o-7:checked ~ .game__result--o
#o-2:checked ~ #o-5:checked ~ #o-8:checked ~ .game__result--o
#o-0:checked ~ #o-4:checked ~ #o-8:checked ~ .game__result--o
#o-2:checked ~ #o-4:checked ~ #o-6:checked ~ .game__result--o
  display flex

  // Edge case if the last move is a winning move. Don't show the draw.
  & ~ .game__result--draw
    display none

  & ~ button
    display block

:checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked ~ :checked
  // if the last move is played and there isn't a winner, show a draw
  ~ .game__result--draw
    display block

  ~ button
    display block

.board__line path
.o circle
.x path
  animation draw calc(var(--draw-speed) * 1s) calc(var(--delay, 0) * 1s) ease-in both

@keyframes draw
  to
    stroke-dashoffset 0